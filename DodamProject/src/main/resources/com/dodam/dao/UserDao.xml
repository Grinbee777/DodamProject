<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dodam.dao.UserDao">

	<resultMap id="UserMap" type="User">
		<result property="uNo"			column="u_no"			jdbcType="NUMERIC"/>
		<result property="nickname"    	column="nickname"       jdbcType="VARCHAR"/>
		<result property="mail"			column="mail"			jdbcType="VARCHAR"/>
		<result property="uPic"			column="u_pic"			jdbcType="VARCHAR"/>
		<result property="uPcode"		column="u_pcode"		jdbcType="NUMERIC"/>
		<result property="password"		column="password"		jdbcType="VARCHAR"/>
		<result property="socialNo"		column="social_no"		jdbcType="VARCHAR"/>
		<result property="uBirth"		column="u_birth"		jdbcType="VARCHAR"/>
		<result property="regDate"		column="reg_date"		jdbcType="DATE"/>
		<result property="authnum"      column="authnum"         jdbcType="VARCHAR"/>
		<result property="uCode"        column="u_code"         jdbcType="VARCHAR"/>
		
	</resultMap>
	
	<insert id="insertUser" parameterType="User" useGeneratedKeys="true" keyProperty="uNo">
		INSERT into users (   
			NICKNAME,	
			 MAIL
			  ,U_PIC
			  ,U_PCODE
			  ,PASSWORD
			  ,SOCIAL_NO
			  ,U_BIRTH
			  ,REG_DATE
			  ,U_CODE
			) VALUES (  
			#{nickname} 
			  ,#{mail}  
			  ,'default.jpg' 
			  ,#{uPcode}  
			  ,#{password}  
			  ,#{socialNo}
			  ,#{uBirth}
			  ,now()
			  ,'1'
			)
	</insert>
	
	<update id="updateUser" parameterType="User">
	UPDATE users
	<set>
	MAIL = #{mail}
  ,U_PIC = #{uPic}
  ,PASSWORD = #{password}
  ,NICKNAME = #{nickname}
	</set>
	WHERE U_NO = #{uNo}
	
	</update>
	
	<select id="getUser" parameterType="int" resultMap="UserMap">
	SELECT * FROM users u LEFT OUTER JOIN email e 
	ON e.U_NO = u.U_NO 
	WHERE u.U_NO=#{uNo}	
	</select>
	
	<select id="getMailUser" parameterType="string" resultMap="UserMap">
	SELECT * FROM users WHERE mail=#{value}	
	</select>
	
	<select id="getNickUser" parameterType="string" resultMap="UserMap">
	SELECT * FROM users WHERE nickname=#{value}	
	</select>
	
	<select id="getNickUserList" parameterType="User" resultMap="UserMap">
	SELECT * FROM users WHERE u_no NOT IN(#{uNo}) AND nickname LIKE CONCAT('%',#{nickname},'%')
	ORDER BY nickname 
	</select>
		
	<delete id="deleteUser" parameterType="int">
	DELETE FROM users WHERE U_NO=#{uNo}	
	</delete>
	
	<select id="getUserList" resultMap="UserMap">
	SELECT * FROM users;
	</select>
	
	<select id="loginUser" parameterType="User" resultMap="UserMap">
	SELECT * FROM users 
	WHERE MAIL = #{mail} 
	</select>
		
	<update id="uCodeUpdate" parameterType="int">
		UPDATE users 
		<set>
		u_code='2'
		</set>
		<where>
		u_no=#{uNo}
		</where>
	</update>
	
	
</mapper>